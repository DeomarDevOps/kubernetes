apiVersion : apps/v1
kind: Deployment
metadata:
  name: $(PROJETO)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $(PROJETO)
  template:
    metadata:
      labels:
        app: $(PROJETO)
    spec:
      containers:
        - name: $(NOME_CONTAINER)
          image: ################.azurecr.io/$(PROJETO_ACR):$(Build.BuildId)
          resources:
            limits:
              memory: 200Mi
              cpu: 1
            requests:
              memory: 100Mi
              cpu: 100m
          ports:
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
    name: $(PROJETO)
spec:
    type: ClusterIP
    ports:
    - port: 80
    selector:
        app: $(PROJETO)
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-$(PROJETO)
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
    - host: $(URLDEV)
      http:
        paths:
          - backend:
              service:
                name: $(PROJETO)
                port:
                  number: 80
            path: /$(URL_SERVICO)/(.*)
            pathType: Prefix
---
apiVersion: security.istio.io/v1beta1
kind: "RequestAuthentication"
metadata:
  name: $(PROJETO)
spec:
  selector:
    matchLabels:
      app: $(PROJETO)
  jwtRules:
    - outputPayloadToHeader: $(PROJETO)
      issuer: "https://keycloak-ms.######.com.br/auth/realms/istio"
      jwksUri: "http://my-keycloak-http.default.svc.cluster.local/auth/realms/istio/protocol/openid-connect/certs"
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: $(PROJETO)
spec:
  selector:
    matchLabels:
      app: $(PROJETO)
  action: ALLOW
  rules:
  - to:
    - operation:
        methods: ["GET"]
    when:
      - key: request.auth.claims[iss]
        values: ["https://keycloak-ms.########.com.br/auth/realms/istio"]
