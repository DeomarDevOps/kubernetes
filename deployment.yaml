apiVersion : apps/v1
kind: Deployment
metadata:
  name: $(PROJETO)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $(PROJETO)
  template:
    metadata:
      labels:
        app: $(PROJETO)
    spec:
      containers:
        - name: $(NOME_CONTAINER)
          image: acrsensediadevhml.azurecr.io/$(PROJETO_ACR):$(Build.BuildId)
          resources:
            limits:
              memory: 200Mi
              cpu: 1
            requests:
              memory: 100Mi
              cpu: 100m
          ports:
          - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
    name: $(PROJETO)
spec:
    type: ClusterIP
    ports:
    - port: 80
    selector:
        app: $(PROJETO)
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-$(PROJETO)
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: nginx
  rules:
    - host: $(URLDEV)
      http:
        paths:
          - backend:
              service:
                name: $(PROJETO)
                port:
                  number: 80
            path: /$(URL_SERVICO)/(.*)
            pathType: Prefix
---
apiVersion: security.istio.io/v1beta1
kind: "RequestAuthentication"
metadata:
  name: $(PROJETO)
spec:
  selector:
    matchLabels:
      app: $(PROJETO)
  jwtRules:
    - outputPayloadToHeader: $(PROJETO)
      issuer: "https://keycloak-ms.unidas.com.br/auth/realms/istio"
      jwksUri: "http://my-keycloak-http.default.svc.cluster.local/auth/realms/istio/protocol/openid-connect/certs"
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: $(PROJETO)
spec:
  selector:
    matchLabels:
      app: $(PROJETO)
  action: ALLOW
  rules:
  - to:
    - operation:
        methods: ["GET"]
    when:
      - key: request.auth.claims[iss]
        values: ["https://keycloak-ms.unidas.com.br/auth/realms/istio"]
        






curl -sk --data "username=istio&password=Megadeth&grant_type=password&client_id=istio" https://keycloak-ms.unidas.com.br/auth/realms/istio/protocol/openid-connect/token



az aks get-credentials --admin --name AKS-SENSEDIA-NPRD --resource-group rg-unidas-api-management-hml-br

- key: request.auth.claims[clientId]
        values: ["$(clientId)"]





apiVersion: apps/v1
kind: Deployment
metadata:
 name: sonarqube
spec:
  selector:
    matchLabels:
     app: sonarqube
  replicas: 1
  template:
    metadata:
      name: sonarqube
      labels:
        app: sonarqube
    spec:
      containers:
      - name: sonarqube
        image: sonarqube:latest
        env:
          - name: "SONARQUBE_JDBC_USERNAME"
            value: "useradmin"
          - name: "SONARQUBE_JDBC_URL"
            value: "jdbc:sqlserver://ms-telemetria-dev.database.windows.net:1433;database=sqlsonar"
          - name: "SONARQUBE_JDBC_PASSWORD"
            value: "$RFVbgt5&*"
        ports:
          - containerPort: 9000
            protocol: TCP
        # resources:
        #   requests:
        #     cpu: 2000m
        #     memory: 2048Mi
        #   limits:
        #     cpu: 6000m
        #     memory: 4096Mi    
---
apiVersion: v1
kind: Service
metadata:
    name: sonarqube
spec:
    selector: 
       app: sonarqube
    ports:
      - name: sonar
        port: 9000
    type: LoadBalancer






apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonar-data
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 31Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonar-extensions
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 31Gi

echo -n 'Megadeth1,302' | base64


apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  password: TWVnYWRldGgxLDMwMg==



apiVersion: apps/v1
kind: Deployment
metadata:
 name: sonarqube
spec:
  selector:
    matchLabels:
     app: sonarqube
  replicas: 1
  template:
    metadata:
      name: sonarqube
      labels:
        app: sonarqube
    spec:
      containers:

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sonarqube
  name: sonarqube
spec:
  selector:
    matchLabels:
     app: sonarqube
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
        - name: sonarqube
          image: sonarqube:latest
          resources:
            requests:
              cpu: 500m
              memory: 1024Mi
            limits:
              cpu: 2000m
              memory: 2048Mi
          env:
          - name: "SONARQUBE_JDBC_USERNAME"
            value: "useradmin"
          - name: "SONARQUBE_JDBC_URL"
            value: "jdbc:mysql://mysqlsonar.mysql.database.azure.com:3306/sonar?useSSL=true"
          - name: "SONARQUBE_JDBC_PASSWORD"
            value: "Megadeth1,302"
          ports:
          - containerPort: 9000
            protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sonarqube
  name: sonarqube
spec:
  ports:
    - name: sonar
      port: 80
      protocol: TCP
      targetPort: 9000
  selector:
    app: sonarqube
  type: LoadBalancer




  sonarUser
  sonarDB
  ZGVmaW5lX2l0a
  ZGVmaW5lX2l0

  c29uYXJQYXNz

  S1lwaTg2QnpJdw==


  c29uYXJQYXNz



  valueFrom:
        secretKeyRef:
          key: postgresql-password
          name: sonarqube-postgresql
    - name: SONAR_WEB_SYSTEMPASSCODE
      valueFrom:
        secretKeyRef:
          key: SONAR_WEB_SYSTEMPASSCODE
          name: sonarqube-sonarqube-monitoring-passcode
    envFrom:
    - configMapRef:
        name: sonarqube-sonarqube-jdbc-config
    image: sonarqube:10.1.0-community
    imagePullPolicy: IfNotPresent
    livenessProbe:
      exec:
        command:
        - sh
        - -c
        - |
          host="$(hostname -i || echo '127.0.0.1')"
          wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode: $SONAR_WEB_SYSTEMPASSCODE" "http://${host}:9000/api/system/liveness"





helm install -n default sonarqube .